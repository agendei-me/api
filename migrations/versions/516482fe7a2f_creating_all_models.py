"""creating all models

Revision ID: 516482fe7a2f
Revises: 23bd6b623f7e
Create Date: 2022-08-30 14:32:15.015713

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '516482fe7a2f'
down_revision = '23bd6b623f7e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('whatsapp_number', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('plan', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('whatsapp_number', sqlmodel.sql.sqltypes.AutoString(length=15), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('agent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('places',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('place_url', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('customer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('availability_groups',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('place_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['place_id'], ['places.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('availabilities',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('timestamp_from', sa.DateTime(), nullable=True),
    sa.Column('timestamp_to', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('availability_group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['availability_group_id'], ['availability_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('duration_min', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('availability_group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['availability_group_id'], ['availability_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('availability_groups_services',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('availability_group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('service_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['availability_group_id'], ['availability_groups.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id', 'availability_group_id', 'service_id')
    )
    op.create_table('timeslots',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('timestamp_from', sa.DateTime(), nullable=True),
    sa.Column('timestamp_to', sa.DateTime(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('availability_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['availability_id'], ['availabilities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appointments',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('observation', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('timeslot_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('client_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['timeslot_id'], ['timeslots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('appointments')
    op.drop_table('timeslots')
    op.drop_table('availability_groups_services')
    op.drop_table('services')
    op.drop_table('availabilities')
    op.drop_table('availability_groups')
    op.drop_table('places')
    op.drop_table('customers')
    op.drop_table('clients')
    # ### end Alembic commands ###
